{% set name = "fcl" %}
{% set version = "0.7.0" %}
{% set sha256 = "90409e940b24045987506a6b239424a4222e2daf648c86dd146cbcb692ebdcbc" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://github.com/flexible-collision-library/fcl/archive/{{ version }}.tar.gz
  sha256: {{ sha256 }}
  patches:
    - 553.patch

build:
  number: 6
  run_exports:
    - {{ pin_subpackage(name, max_pin='x.x') }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ stdlib('c') }}
    - cmake
    - ninja
  host:
    - flann
    - libode
    - libccd-double
    - eigen
    - octomap
  run:
    - flann

test:
  commands:
    - test -f $PREFIX/include/fcl/geometry/shape/cylinder.h  # [not win]
    - test -f $PREFIX/lib/pkgconfig/fcl.pc  # [not win]
    - test -f $PREFIX/lib/cmake/fcl/fcl-config.cmake  # [not win]
    - test -f $PREFIX/lib/libfcl${SHLIB_EXT}  # [not win]
    - if not exist %PREFIX%\\Library\\include\\fcl\\geometry\\shape\\cylinder.h exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\pkgconfig\\fcl.pc exit 1  # [win]
    - if not exist %PREFIX%\\Library\\CMake\\fcl-config.cmake exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\fcl.lib exit 1  # [win]

about:
  home: https://github.com/flexible-collision-library/fcl
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: The flexible collision library (FCL) is a library for performing proximity queries.
  description: |
    FCL is a library for performing three types of proximity queries on a pair of geometric models composed of triangles.

    - Collision detection: detecting whether the two models overlap, and
      optionally, all of the triangles that overlap.
    - Distance computation: computing the minimum distance between a pair of
      models, i.e., the distance between the closest pair of points.
    - Tolerance verification: determining whether two models are closer or
      farther than a tolerance distance.
    - Continuous collision detection: detecting whether the two moving
      models overlap during the movement, and optionally, the time of
      contact.
    - Contact information: for collision detection and continuous collision
      detection, the contact information (including contact normals and
      contact points) can be returned optionally.

extra:
  recipe-maintainers:
    - jeongseok-meta
    - wolfv
    - traversaro
